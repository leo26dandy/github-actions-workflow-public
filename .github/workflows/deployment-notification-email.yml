name: Deployment Notification Email

on:
  pull_request:
    types: [closed]
    branches: [main, dev-stable]
  push:
    branches: [main, dev-stable]

jobs:
  notify:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Ensure we have at least 2 commits for diff

      - name: Extract commit info
        id: changes
        run: |
          set -e  # Exit on error
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Pull request merged
            echo "type=Pull Request Merged" >> $GITHUB_OUTPUT
            echo "author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
            echo "url=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
            
            # Safe handling of title with proper escaping
            title="${{ github.event.pull_request.title }}"
            {
              echo "title<<EOF_TITLE"
              echo "$title"
              echo "EOF_TITLE"
            } >> $GITHUB_OUTPUT
            
            # Format merge time
            merge_time="${{ github.event.pull_request.merged_at }}"
            if [ -n "$merge_time" ] && [ "$merge_time" != "null" ]; then
              # Convert ISO date to readable format
              commit_time=$(date -d "$merge_time" '+%A, %B %d, %Y at %I:%M %p %Z' 2>/dev/null || date '+%A, %B %d, %Y at %I:%M %p %Z')
            else
              commit_time=$(date '+%A, %B %d, %Y at %I:%M %p %Z')
            fi
            
          else
            # Direct push
            echo "type=Direct Push" >> $GITHUB_OUTPUT
            echo "author=${{ github.actor }}" >> $GITHUB_OUTPUT
            echo "url=https://github.com/${{ github.repository }}/commit/${{ github.sha }}" >> $GITHUB_OUTPUT
            
            # Safe handling of commit message
            title=$(git log -1 --pretty=format:'%s' 2>/dev/null || echo "Latest commit")
            {
              echo "title<<EOF_TITLE"
              echo "$title"
              echo "EOF_TITLE"
            } >> $GITHUB_OUTPUT
            
            # Format commit time
            commit_time=$(git log -1 --date=format:'%A, %B %d, %Y at %I:%M %p %Z' --pretty=format:'%cd' 2>/dev/null || date '+%A, %B %d, %Y at %I:%M %p %Z')
          fi
          
          # Store formatted time
          {
            echo "commit_time<<EOF_TIME"
            echo "$commit_time"
            echo "EOF_TIME"
          } >> $GITHUB_OUTPUT

          # Get changed files safely
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            files=$(git diff --name-only HEAD~1 HEAD 2>/dev/null | head -10 || echo "Unable to determine changed files")
          else
            # For initial commit or single commit repos
            files=$(git ls-files 2>/dev/null | head -10 || echo "Repository files")
          fi
          
          {
            echo "files<<EOF_FILES"
            echo "$files"
            echo "EOF_FILES"
          } >> $GITHUB_OUTPUT

      - name: Create email content
        id: email
        run: |
          set -e
          
          # Set priority and color based on branch - MAINTAIN RED COLOR SCHEME
          if [ "${{ github.ref_name }}" = "main" ]; then
            priority="üü© PRODUCTION DEPLOYMENT"
            priority_color="#c40000"
            bg_color="#fff5f5"
          else
            priority="üü® DEVELOPMENT DEPLOYMENT"
            priority_color="#c40000"  # Keep red color for consistency
            bg_color="#fff5f5"       # Keep red-based background
          fi
          
          # Create email template using Node.js for safe HTML generation
          cat << 'SCRIPT_EOF' > generate_email.js
          const fs = require('fs');
          
          // Read environment variables safely
          const data = {
            priority: process.env.PRIORITY || 'Deployment',
            priorityColor: process.env.PRIORITY_COLOR || '#c40000',
            bgColor: process.env.BG_COLOR || '#ffffff',
            type: process.env.CHANGE_TYPE || 'Unknown',
            title: process.env.CHANGE_TITLE || 'No title',
            author: process.env.CHANGE_AUTHOR || 'Unknown',
            branch: process.env.BRANCH_NAME || 'unknown',
            url: process.env.CHANGE_URL || '#',
            commitTime: process.env.COMMIT_TIME || 'Unknown time',
            repository: process.env.REPOSITORY || 'unknown/repo',
            files: (process.env.CHANGED_FILES || 'No files').split('\n').filter(f => f.trim())
          };
          
          // HTML escape function
          function escapeHtml(text) {
            const map = {
              '&': '&amp;',
              '<': '&lt;',
              '>': '&gt;',
              '"': '&quot;',
              "'": '&#039;'
            };
            return text.replace(/[&<>"']/g, m => map[m]);
          }
          
          // Generate file list
          const filesList = data.files.map(file => 
            file.trim() ? `<div style="padding: 2px 0; color: #666;">‚Ä¢ ${escapeHtml(file)}</div>` : ''
          ).filter(Boolean).join('') || '<div style="color: #999; font-style: italic;">No files to display</div>';
          
          const html = `<!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Deployment Notification</title>
          </head>
          <body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif; background: #f8f9fa; margin: 0; padding: 20px; line-height: 1.6;">
          
            <div style="max-width: 600px; margin: 0 auto; background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); overflow: hidden;">
              
              <!-- Header Banner -->
              <div style="background: ${data.priorityColor}; color: white; padding: 20px; text-align: center;">
                <img src="https://onedrive.live.com/f70fac43-75bf-42ea-9769-6ae4af0ef35b" alt="Made Indonesia" style="width: 60px; height: 60px; margin-bottom: 12px; border-radius: 50%; background: white; padding: 4px; object-fit: cover;">
                <div style="font-size: 24px; font-weight: bold; margin-bottom: 8px;">${escapeHtml(data.priority)}</div>
                <div style="font-size: 16px; opacity: 0.9;">${escapeHtml(data.type)}</div>
              </div>
              
              <!-- Main Content -->
              <div style="padding: 30px; background: white;">
                
                <!-- Commit Title -->
                <div style="background: ${data.bgColor}; border-left: 4px solid ${data.priorityColor}; padding: 15px; margin-bottom: 25px; border-radius: 0 4px 4px 0;">
                  <div style="font-size: 18px; font-weight: 600; color: #333; margin-bottom: 8px;">üìù ${escapeHtml(data.title)}</div>
                  <div style="font-size: 14px; color: #666;">
                    by <strong style="color: ${data.priorityColor};">${escapeHtml(data.author)}</strong> on 
                    <span style="background: ${data.priorityColor}; color: white; padding: 2px 8px; border-radius: 12px; font-size: 12px; font-weight: 500;">${escapeHtml(data.branch)}</span>
                  </div>
                </div>
          
                <!-- Details Table -->
                <table style="width: 100%; border-collapse: collapse; margin-bottom: 25px;">
                  <tr>
                    <td style="padding: 12px 0; border-bottom: 1px solid #eee; width: 120px; font-weight: 600; color: #555;">Repository:</td>
                    <td style="padding: 12px 0; border-bottom: 1px solid #eee; color: #333;">${escapeHtml(data.repository)}</td>
                  </tr>
                  <tr>
                    <td style="padding: 12px 0; border-bottom: 1px solid #eee; font-weight: 600; color: #555;">Deployed:</td>
                    <td style="padding: 12px 0; border-bottom: 1px solid #eee; color: #333;">${escapeHtml(data.commitTime)}</td>
                  </tr>
                  <tr>
                    <td style="padding: 12px 0; font-weight: 600; color: #555;">Action:</td>
                    <td style="padding: 12px 0;">
                      <a href="${escapeHtml(data.url)}" style="background: ${data.priorityColor}; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; font-weight: 500; display: inline-block;">
                        üîó View Changes
                      </a>
                    </td>
                  </tr>
                </table>
          
                <!-- Changed Files -->
                <div style="margin-top: 25px;">
                  <div style="font-size: 16px; font-weight: 600; color: #333; margin-bottom: 12px; display: flex; align-items: center;">
                    <span style="margin-right: 8px;">üìÅ</span> Changed Files
                  </div>
                  <div style="background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 6px; padding: 15px; font-family: 'Courier New', monospace; font-size: 13px; max-height: 200px; overflow-y: auto;">
                    ${filesList}
                  </div>
                </div>
              </div>
          
              <!-- Footer -->
              <div style="background: #f8f9fa; border-top: 1px solid #dee2e6; padding: 20px; text-align: center; color: #666; font-size: 12px;">
                <div>Automated notification from <strong>${escapeHtml(data.repository)}</strong></div>
                <div style="margin-top: 5px; opacity: 0.8;">Generated on ${escapeHtml(data.commitTime)}</div>
              </div>
            </div>
          
          </body>
          </html>`;
          
          fs.writeFileSync('email.html', html);
          SCRIPT_EOF
          
          # Set environment variables for the Node.js script
          export PRIORITY="$priority"
          export PRIORITY_COLOR="$priority_color"
          export BG_COLOR="$bg_color"
          export CHANGE_TYPE="${{ steps.changes.outputs.type }}"
          export CHANGE_TITLE="${{ steps.changes.outputs.title }}"
          export CHANGE_AUTHOR="${{ steps.changes.outputs.author }}"
          export BRANCH_NAME="${{ github.ref_name }}"
          export CHANGE_URL="${{ steps.changes.outputs.url }}"
          export COMMIT_TIME="${{ steps.changes.outputs.commit_time }}"
          export REPOSITORY="${{ github.repository }}"
          export CHANGED_FILES="${{ steps.changes.outputs.files }}"
          
          # Generate the email HTML safely
          node generate_email.js

      - name: Send mail
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "[${{ github.ref_name }}] ${{ steps.changes.outputs.type }}: ${{ steps.changes.outputs.title }}"
          html_body: file://email.html
          to: ${{ secrets.EMAIL_RECIPIENTS }}
          from: ${{ secrets.EMAIL_FROM }}
          reply_to: ${{ secrets.EMAIL_FROM }}
          priority: ${{ github.ref_name == 'main' && 'high' || 'normal' }}

      - name: Upload email artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: email-notification-${{ github.run_id }}
          path: email.html
          retention-days: 7

      - name: Summary
        if: always()
        run: |
          echo "## Email Notification Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Type** | ${{ steps.changes.outputs.type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Author** | ${{ steps.changes.outputs.author }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Time** | ${{ steps.changes.outputs.commit_time }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Status** | ${{ job.status == 'success' && '‚úÖ Successfully sent' || '‚ùå Failed to send' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "üìé Email content has been saved as an artifact for review." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùó Check the logs above for error details." >> $GITHUB_STEP_SUMMARY
          fi
